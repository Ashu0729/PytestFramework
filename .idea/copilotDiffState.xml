<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# PytestFramework&#10;&#10;A robust and extensible automation framework built primarily using **Pytest** and **Selenium WebDriver**. This framework is designed for test automation of web applications with a focus on maintainability, advanced reporting, and ease of configuration.&#10;&#10;---&#10;&#10;## Key Features&#10;&#10;### 1. **Cross-Browser &amp; Configurable Test Execution**&#10;- Easily select and configure the browser for test execution via command-line options.&#10;- Supports integration with Selenium WebDriver for real browser automation.&#10;&#10;### 2. **Modular Page Object Model**&#10;- Encapsulates page-specific logic and locators via the Page Object Model design pattern for maintainable test scripts.&#10;&#10;### 3. **Custom Test Data Management**&#10;- Centralized management of test data through the `TestData` package, ensuring data-driven testing and easy scalability.&#10;&#10;### 4. **Advanced Pytest Hooks &amp; Fixtures**&#10;- Custom `conftest.py` includes:&#10;  - Browser setup/teardown as fixtures.&#10;  - Hooks for customizing test runs, such as screenshot capture on failures, and dynamic HTML report enhancements.&#10;&#10;### 5. **Rich HTML Reporting**&#10;- Generates interactive and visually appealing HTML reports:&#10;  - **Collapsible test result sections** for improved readability.&#10;  - **Embedded media support**: Inline images and video (such as screenshots of failures or steps).&#10;  - **Test logs**: Expandable log sections with error highlighting for rapid debugging.&#10;  - **Environment summary**: Details Python version, OS, packages, plugins, and custom metadata.&#10;  - **Filtering and sorting**: Filter results by status (passed, failed, skipped, etc.), and sort columns interactively.&#10;&#10;### 6. **Custom Metadata &amp; Reporting Enhancements**&#10;- Add custom metadata to the HTML report summary using Pytest hooks.&#10;- Custom HTML in reports via result table hooks.&#10;&#10;### 7. **Interactive UI Elements in Reports**&#10;- **Media carousel**: Browse multiple screenshots or videos per test.&#10;- **Show/hide all details**: Quickly expand or collapse all test logs and media.&#10;- **Dynamic filtering**: Checkbox-based filtering for results, with real-time updates.&#10;&#10;### 8. **Extensible for Plugins**&#10;- Integrates with popular Pytest plugins like `pytest-html`, `pytest-cov`, and `pytest-xdist` for parallel execution and coverage.&#10;&#10;---&#10;&#10;## Getting Started&#10;&#10;1. **Clone the repository**&#10;   ```bash&#10;   git clone https://github.com/Ashu0729/PytestFramework.git&#10;   cd PytestFramework&#10;   ```&#10;&#10;2. **Install dependencies**&#10;   ```bash&#10;   pip install -r requirements.txt&#10;   ```&#10;&#10;3. **Run tests**&#10;&#10;   **SingleTest in Edge**&#10;   ```bash&#10;   pytest -s -v --html=./Reports/report.html testCases/test_loginPage.py --browser=Edge&#10;   ```&#10;   **SanityTests in Chrome**&#10;   ```bash&#10;   pytest -s -v -m &quot;sanity&quot; --html=./Reports/report.html testCases --browser=Chrome&#10;   ```&#10;   **RegressionTests in Edge**&#10;   ```bash&#10;   pytest -s -v -m &quot;regression&quot; --html=./Reports/report.html testCases --browser=Edge&#10;   ```&#10;   **Run tests through Jenkins**&#10;   ```bash&#10;   call &quot;C:\Users\ashut\PycharmProjects\Pytest Framework\.venv\Scripts\activate&quot;&#10;   pytest -s -v --html=./Reports/report.html testCases/test_loginPage.py --browser=Edge&#10;   ```&#10;---&#10;&#10;## Directory Structure&#10;&#10;- `testCases/` — Test scripts and fixtures (`conftest.py`)&#10;- `pageObjects/` — Page Object Model classes&#10;- `TestData/` — Centralized test data&#10;- `Reports/` — Generated HTML reports and assets&#10;&#10;---&#10;&#10;## Tech Stack&#10;&#10;- **Python** (Pytest, Selenium)&#10;- **HTML, CSS, JavaScript** (for report generation and interactivity)&#10;&#10;---&#10;&#10;## Contributing&#10;&#10;Contributions and suggestions are welcome! Please open issues or submit pull requests for improvements.&#10;&#10;---&#10;&#10;## License&#10;&#10;This project is licensed under the MIT License.&#10;" />
              <option name="updatedContent" value="# PytestFramework&#10;&#10;A robust and extensible automation framework built primarily using **Pytest** and **Selenium WebDriver**. This framework is designed for test automation of web applications with a focus on maintainability, advanced reporting, and ease of configuration.&#10;&#10;---&#10;&#10;## Key Features&#10;&#10;### 1. **Cross-Browser &amp; Configurable Test Execution**&#10;- Easily select and configure the browser for test execution via command-line options.&#10;- Supports integration with Selenium WebDriver for real browser automation.&#10;&#10;### 2. **Modular Page Object Model**&#10;- Encapsulates page-specific logic and locators via the Page Object Model design pattern for maintainable test scripts.&#10;&#10;### 3. **Custom Test Data Management**&#10;- Centralized management of test data through the `TestData` package, ensuring data-driven testing and easy scalability.&#10;&#10;### 4. **Advanced Pytest Hooks &amp; Fixtures**&#10;- Custom `conftest.py` includes:&#10;  - Browser setup/teardown as fixtures.&#10;  - Hooks for customizing test runs, such as screenshot capture on failures, and dynamic HTML report enhancements.&#10;&#10;### 5. **Rich HTML Reporting**&#10;- Generates interactive and visually appealing HTML reports:&#10;  - **Collapsible test result sections** for improved readability.&#10;  - **Embedded media support**: Inline images and video (such as screenshots of failures or steps).&#10;  - **Test logs**: Expandable log sections with error highlighting for rapid debugging.&#10;  - **Environment summary**: Details Python version, OS, packages, plugins, and custom metadata.&#10;  - **Filtering and sorting**: Filter results by status (passed, failed, skipped, etc.), and sort columns interactively.&#10;&#10;### 6. **Custom Metadata &amp; Reporting Enhancements**&#10;- Add custom metadata to the HTML report summary using Pytest hooks.&#10;- Custom HTML in reports via result table hooks.&#10;&#10;### 7. **Interactive UI Elements in Reports**&#10;- **Media carousel**: Browse multiple screenshots or videos per test.&#10;- **Show/hide all details**: Quickly expand or collapse all test logs and media.&#10;- **Dynamic filtering**: Checkbox-based filtering for results, with real-time updates.&#10;&#10;### 8. **Extensible for Plugins**&#10;- Integrates with popular Pytest plugins like `pytest-html`, `pytest-cov`, and `pytest-xdist` for parallel execution and coverage.&#10;&#10;---&#10;&#10;## Getting Started&#10;&#10;1. **Clone the repository**&#10;   ```bash&#10;   git clone https://github.com/Ashu0729/PytestFramework.git&#10;   cd PytestFramework&#10;   ```&#10;&#10;2. **Install dependencies**&#10;   ```bash&#10;   pip install -r requirements.txt&#10;   ```&#10;&#10;3. **Run tests**&#10;&#10;   **SingleTest in Edge**&#10;   ```bash&#10;   pytest -s -v --html=./Reports/report.html testCases/test_loginPage.py --browser=Edge&#10;   ```&#10;   **SanityTests in Chrome**&#10;   ```bash&#10;   pytest -s -v -m &quot;sanity&quot; --html=./Reports/report.html testCases --browser=Chrome&#10;   ```&#10;   **RegressionTests in Edge**&#10;   ```bash&#10;   pytest -s -v -m &quot;regression&quot; --html=./Reports/report.html testCases --browser=Edge&#10;   ```&#10;   **Run tests through Jenkins**&#10;   ```bash&#10;   call &quot;C:\Users\ashut\PycharmProjects\Pytest Framework\.venv\Scripts\activate&quot;&#10;   pytest -s -v --html=./Reports/report.html testCases/test_loginPage.py --browser=Edge&#10;   ```&#10;---&#10;&#10;## Directory Structure&#10;&#10;- `testCases/` — Test scripts and fixtures (`conftest.py`)&#10;- `pageObjects/` — Page Object Model classes&#10;- `TestData/` — Centralized test data&#10;- `Reports/` — Generated HTML reports and assets&#10;&#10;---&#10;&#10;## Tech Stack&#10;&#10;- **Python** (Pytest, Selenium)&#10;- **HTML, CSS, JavaScript** (for report generation and interactivity)&#10;&#10;---&#10;&#10;## Contributing&#10;&#10;Contributions and suggestions are welcome! Please open issues or submit pull requests for improvements.&#10;&#10;---&#10;&#10;## License&#10;&#10;This project is licensed under the MIT License." />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>