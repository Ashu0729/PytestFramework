<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/pageObjects/Customers.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pageObjects/Customers.py" />
              <option name="originalContent" value="from selenium.webdriver.common.by import By&#10;&#10;class CustomersPage:&#10;    def __init__(self, driver):&#10;        self.driver = driver&#10;&#10;    # Locators&#10;    ADD_NEW_BUTTON = (By.XPATH, &quot;//a[contains(@href, '/Admin/Customer/Create') and contains(., 'Add new')]&quot;)&#10;    SEARCH_EMAIL = (By.ID, &quot;SearchEmail&quot;)&#10;    SEARCH_FIRST_NAME = (By.ID, &quot;SearchFirstName&quot;)&#10;    SEARCH_LAST_NAME = (By.ID, &quot;SearchLastName&quot;)&#10;    SEARCH_BUTTON = (By.ID, &quot;search-customers&quot;)&#10;    SUCCESS_MESSAGE = (By.XPATH, &quot;//*[contains(text(), 'The new customer has been added successfully') or contains(@class, 'alert-success')]&quot;)&#10;    CUSTOMERS_TABLE = (By.ID, &quot;customers-grid&quot;)&#10;    NO_DATA_MESSAGE = (By.XPATH, &quot;//*[contains(text(),'No data available in table')]&quot;)&#10;&#10;    # Locator for success notification/banner&#10;    SUCCESS_MESSAGE = (By.XPATH, &quot;//div[contains(@class, 'alert-success') or contains(text(),'The new customer has been added successfully')]&quot;)&#10;&#10;    # Actions&#10;    def click_add_new(self):&#10;        self.driver.find_element(*self.ADD_NEW_BUTTON).click()&#10;&#10;    def click_search(self):&#10;        self.driver.find_element(*self.SEARCH_BUTTON).click()&#10;&#10;    def get_success_message_text(self):&#10;        return self.driver.find_element(*self.SUCCESS_MESSAGE).text&#10;&#10;    def is_no_data_message_displayed(self):&#10;        return len(self.driver.find_elements(*self.NO_DATA_MESSAGE)) &gt; 0&#10;&#10;    def get_customers_table(self):&#10;        return self.driver.find_element(*self.CUSTOMERS_TABLE)&#10;&#10;    # Utility: Combine search workflow&#10;    def search_customer(self, email=None, first_name=None, last_name=None):&#10;        if email:&#10;            element = self.driver.find_element(*self.SEARCH_EMAIL)&#10;            element.clear()&#10;            element.send_keys(email)&#10;        if first_name:&#10;            element = self.driver.find_element(*self.SEARCH_FIRST_NAME)&#10;            element.clear()&#10;            element.send_keys(first_name)&#10;        if last_name:&#10;            element = self.driver.find_element(*self.SEARCH_LAST_NAME)&#10;            element.clear()&#10;            element.send_keys(last_name)&#10;        self.click_search()&#10;&#10;    def get_success_message_text(self):&#10;        return self.driver.find_element(*self.SUCCESS_MESSAGE).text" />
              <option name="updatedContent" value="from selenium.webdriver.common.by import By&#10;&#10;class CustomersPage:&#10;    def __init__(self, driver):&#10;        self.driver = driver&#10;&#10;    # Locators&#10;    ADD_NEW_BUTTON = (By.XPATH, &quot;//a[contains(@href, '/Admin/Customer/Create') and contains(., 'Add new')]&quot;)&#10;    SEARCH_EMAIL = (By.ID, &quot;SearchEmail&quot;)&#10;    SEARCH_FIRST_NAME = (By.ID, &quot;SearchFirstName&quot;)&#10;    SEARCH_LAST_NAME = (By.ID, &quot;SearchLastName&quot;)&#10;    SEARCH_BUTTON = (By.ID, &quot;search-customers&quot;)&#10;    SUCCESS_MESSAGE = (By.XPATH, &quot;//*[contains(text(), 'The new customer has been added successfully') or contains(@class, 'alert-success')]&quot;)&#10;    CUSTOMERS_TABLE = (By.ID, &quot;customers-grid&quot;)&#10;    NO_DATA_MESSAGE = (By.XPATH, &quot;//*[contains(text(),'No data available in table')]&quot;)&#10;&#10;    # Locator for success notification/banner&#10;    SUCCESS_MESSAGE = (By.XPATH, &quot;//div[contains(@class, 'alert-success') or contains(text(),'The new customer has been added successfully')]&quot;)&#10;&#10;    # Actions&#10;    def click_add_new(self):&#10;        self.driver.find_element(*self.ADD_NEW_BUTTON).click()&#10;&#10;    def click_search(self):&#10;        self.driver.find_element(*self.SEARCH_BUTTON).click()&#10;&#10;    def get_success_message_text(self):&#10;        return self.driver.find_element(*self.SUCCESS_MESSAGE).text&#10;&#10;    def is_no_data_message_displayed(self):&#10;        return len(self.driver.find_elements(*self.NO_DATA_MESSAGE)) &gt; 0&#10;&#10;    def get_customers_table(self):&#10;        return self.driver.find_element(*self.CUSTOMERS_TABLE)&#10;&#10;    # Utility: Combine search workflow&#10;    def search_customer(self, email=None, first_name=None, last_name=None):&#10;        if email:&#10;            element = self.driver.find_element(*self.SEARCH_EMAIL)&#10;            element.clear()&#10;            element.send_keys(email)&#10;        if first_name:&#10;            element = self.driver.find_element(*self.SEARCH_FIRST_NAME)&#10;            element.clear()&#10;            element.send_keys(first_name)&#10;        if last_name:&#10;            element = self.driver.find_element(*self.SEARCH_LAST_NAME)&#10;            element.clear()&#10;            element.send_keys(last_name)&#10;        self.click_search()" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>